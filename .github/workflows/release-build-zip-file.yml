name: 'Release: Build ZIP file'
on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'By default the zip file is generated from the branch the workflow runs from, but you can specify an explicit reference to use instead here (e.g. refs/tags/tag_name or refs/heads/release/x.x). The resulting file will be available as an artifact on the workflow run.'
        required: false
        default: ''
      skip_verify:
        description: 'Skip the PR verification step (default: false) pass true to skip'
        required: false
        default: 'false'

permissions: {}

jobs:
  verify-prs:
    name: 'Verify if any PR is left open by author:app/github-actions'
    outputs:
      runBuildZipJob: ${{ steps.verify-prs.outputs.runBuildZipJob }}
    runs-on: ubuntu-latest
    steps:
        - name: Verify if any PR is left open by author:app/github-actions
          id: verify-prs
          uses: actions/github-script@v6
          with:
              github-token: ${{ secrets.GITHUB_TOKEN }}
              script: |
                  let runBuildZipJob = true;
                  const event = context.payload;

                  if (event.inputs.skip_verify !== 'false') {
                    core.setOutput('runBuildZipJob', runBuildZipJob);
                    console.log('Skipping verification step');
                    return;
                  }

                  const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');

                  // Helper function to add delay between API calls
                  const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

                  // Function to handle API call with retry logic
                  const searchPRs = async (query) => {
                    let attempts = 0;
                    while (attempts < 5) {
                      try {
                        return await github.rest.search.issuesAndPullRequests({ q: query });
                      } catch (error) {
                        if (error.status === 403 && error.message.includes('secondary rate limit')) {
                          console.log('Rate limit hit, retrying...');
                          await delay(31000); // 31 second delay before retry
                          attempts++;
                        } else {
                          throw error;
                        }
                      }
                    }
                    throw new Error('Failed to fetch PRs after multiple attempts');
                  };

                  // Search for PRs from github-actions bot
                  const githubActionsPRsQuery = await searchPRs(`repo:${owner}/${repo} is:pr is:open author:app/github-actions`);
                  const prsOpenByGithubActions = githubActionsPRsQuery.data.items;

                  let failureMessage = ``;

                  if (prsOpenByGithubActions.length > 0) {
                      runBuildZipJob = false;

                      failureMessage += `Identified \`${prsOpenByGithubActions.length}\` open PR(s) from \`github-actions\` bot which should be merged or closed before proceeding. <https://github.com/${owner}/${repo}/issues?q=is%3Apr+is%3Aopen+author%3Aapp%2Fgithub-actions|Link to PRs>`;

                      failureMessage += '\n\nThis step maintains the code integrity and is critical to avoid regression in future releases. Please merge them or close them before proceeding or set \`skip_verify\` to \`true\` before running the workflow to skip this step if you are confident that the PRs are irrelevant.';

                      console.error(failureMessage);
                      core.setOutput('failureMessage', failureMessage);
                  }
                  core.setOutput('runBuildZipJob', runBuildZipJob);

        - name: Notify Slack on failure
          if: ${{ steps.verify-prs.outputs.failureMessage != '' }}
          uses: archive/github-actions-slack@v2.0.0
          with:
              slack-bot-user-oauth-access-token: ${{ secrets.CODE_FREEZE_BOT_TOKEN }}
              slack-channel: ${{ secrets.WOO_RELEASE_SLACK_CHANNEL }}
              slack-text: |
                  :x: Oops we may have missed PRs left open by `github-actions` bot. WooCommerce release zip build failed.
                  :warning-8c: ${{ steps.verify-prs.outputs.failureMessage }}
                  <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Workflow Run>
              slack-optional-unfurl_links: false
              slack-optional-unfurl_media: false
          continue-on-error: true

  verify-release-versions:
    name: 'Verify release and stable tag versions'
    runs-on: ubuntu-latest
    if: ${{ inputs.skip_verify == 'false' }}
    steps:
      - uses: actions/checkout@v4

      - name: 'Pre-build verification'
        run: |
            branch_name="${GITHUB_REF#refs/heads/}"
            if  [[ $branch_name != release/* ]] ; then
                echo "[ERR] Pre-build verification: the branch name is NOT matching 'release/*' pattern (identified as $branch_name)"
                exit 1
            else
                echo "[OK] Pre-build verification: the branch name is matching 'release/*' pattern ($branch_name)"
            fi
            version_prefix=${branch_name/"release/"/""}

            # Validate release version related attributions
            branch_plugin_version=$( cat plugins/woocommerce/woocommerce.php | grep -oP '(?<=Version: )(.+)' | head -n1 )
            svn_plugin_version=$( wget --quiet https://plugins.svn.wordpress.org/woocommerce/trunk/woocommerce.php -O /dev/stdout |  grep -oP '(?<=Version: )(.+)' | head -n1 )
            if [[ $branch_plugin_version != "$version_prefix."* ]] ; then
                echo "[ERR] Pre-build verification: release version in branch is NOT matching '$version_prefix.*' pattern (identified as $branch_plugin_version)"
                exit 1
            else
                echo "[OK] Pre-build verification: release version in branch is matching '$version_prefix.*' pattern ($branch_plugin_version)"
            fi
            if [[ $branch_plugin_version == $svn_plugin_version ]] ; then
                echo "[ERR] Pre-build verification: release version in branch is matching the one in SVN trunk (identified as $branch_plugin_version)"
                exit 1
            else
                echo "[OK] Pre-build verification: release version in branch is NOT matching the one in SVN trunk ($branch_plugin_version vs $svn_plugin_version)"
            fi

            # Validate stable version attribution
            branch_stable_version=$( cat plugins/woocommerce/readme.txt | grep -oP '(?<=Stable tag: )(.+)' | head -n1 )
            svn_stable_version=$( wget --quiet https://plugins.svn.wordpress.org/woocommerce/trunk/readme.txt -O /dev/stdout |  grep -oP '(?<=Stable tag: )(.+)' | head -n1 )
            if [[ $branch_stable_version != $svn_stable_version ]] ; then
                echo "[ERR] Pre-build verification: stable version in branch is NOT matching the one in SVN trunk (identified as $branch_stable_version)"
                exit 1
            else
                echo "[OK] Pre-build verification: stable version in branch is matching the one in SVN trunk ($branch_stable_version vs $svn_stable_version)"
            fi
  
            # Validate changelog for the target release version
            branch_changelog_version=$( cat changelog.txt | grep -oP '\d+\.\d+\.\d+ '| tail -n +1 | head -n1 )
            if [[ $branch_plugin_version != *'-'* ]] && [[ $branch_plugin_version != $branch_changelog_version ]]; then
                echo "[ERR] Pre-build verification: changelog for $branch_plugin_version is missing"
                exit 1
            else
                echo "[OK] Pre-build verification: changelog for $branch_plugin_version is present or not required (the last entry is for $branch_changelog_version)"
            fi

  build:
    name: Build release zip file
    runs-on: ubuntu-latest
    if: ${{ needs.verify-prs.outputs.runBuildZipJob == 'true' }}
    needs: [ verify-prs, verify-release-versions ]
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup WooCommerce Monorepo
        uses: ./.github/actions/setup-woocommerce-monorepo
        with:
          pull-package-deps: '@woocommerce/plugin-woocommerce'

      - name: Build zip
        working-directory: plugins/woocommerce
        run: bash bin/build-zip.sh

      - name: Unzip the file (prevents double zip problem)
        run: unzip plugins/woocommerce/woocommerce.zip -d zipfile

      - name: Upload the zip file as an artifact
        uses: actions/upload-artifact@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: woocommerce
          path: zipfile
          retention-days: 7
