name: 'Release: Build ZIP file'
on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Source branch to use. Defaults to the branch the workflow is run from.'
        required: false
        default: ''
      skip_verify:
        description: 'Skip verification steps.'
        type: boolean
        required: true
        default: false
      create_github_release:
        description: 'Create a draft GitHub release.'
        type: boolean
        required: true
        default: false

permissions: {}

jobs:
  verify-prs:
    name: 'Verify if any PR is left open by author:app/github-actions'
    outputs:
      runBuildZipJob: ${{ steps.verify-prs.outputs.runBuildZipJob }}
    runs-on: ubuntu-latest
    steps:
        - name: Verify if any PR is left open by author:app/github-actions
          id: verify-prs
          uses: actions/github-script@v6
          with:
              github-token: ${{ secrets.GITHUB_TOKEN }}
              script: |
                  let runBuildZipJob = true;
                  const event = context.payload;

                  if (event.inputs.skip_verify === 'true') {
                    core.setOutput('runBuildZipJob', runBuildZipJob);
                    console.log('Skipping verification step');
                    return;
                  }

                  const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');

                  // Helper function to add delay between API calls
                  const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

                  // Function to handle API call with retry logic
                  const searchPRs = async (query) => {
                    let attempts = 0;
                    while (attempts < 5) {
                      try {
                        return await github.rest.search.issuesAndPullRequests({ q: query });
                      } catch (error) {
                        if (error.status === 403 && error.message.includes('secondary rate limit')) {
                          console.log('Rate limit hit, retrying...');
                          await delay(31000); // 31 second delay before retry
                          attempts++;
                        } else {
                          throw error;
                        }
                      }
                    }
                    throw new Error('Failed to fetch PRs after multiple attempts');
                  };

                  // Search for PRs from github-actions bot
                  const githubActionsPRsQuery = await searchPRs(`repo:${owner}/${repo} is:pr is:open author:app/github-actions`);
                  const prsOpenByGithubActions = githubActionsPRsQuery.data.items;

                  let failureMessage = ``;

                  if (prsOpenByGithubActions.length > 0) {
                      runBuildZipJob = false;

                      failureMessage += `Identified \`${prsOpenByGithubActions.length}\` open PR(s) from \`github-actions\` bot which should be merged or closed before proceeding. <https://github.com/${owner}/${repo}/issues?q=is%3Apr+is%3Aopen+author%3Aapp%2Fgithub-actions|Link to PRs>`;

                      failureMessage += '\n\nThis step maintains the code integrity and is critical to avoid regression in future releases. Please merge them or close them before proceeding or set \`skip_verify\` to \`true\` before running the workflow to skip this step if you are confident that the PRs are irrelevant.';

                      console.error(failureMessage);
                      core.setOutput('failureMessage', failureMessage);
                  }
                  core.setOutput('runBuildZipJob', runBuildZipJob);

        - name: Notify Slack on failure
          if: ${{ steps.verify-prs.outputs.failureMessage != '' && inputs.create_github_release }}
          uses: archive/github-actions-slack@f530f3aa696b2eef0e5aba82450e387bd7723903 #v2.0.0
          with:
              slack-bot-user-oauth-access-token: ${{ secrets.CODE_FREEZE_BOT_TOKEN }}
              slack-channel: ${{ secrets.WOO_RELEASE_SLACK_CHANNEL }}
              slack-text: |
                  :x: Oops we may have missed PRs left open by `github-actions` bot. WooCommerce release zip build failed.
                  :warning-8c: ${{ steps.verify-prs.outputs.failureMessage }}
                  <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Workflow Run>
              slack-optional-unfurl_links: false
              slack-optional-unfurl_media: false
          continue-on-error: true

  verify-release-versions:
    name: 'Verify release and stable tag versions'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || github.ref }}
          path: checkout-branch
          sparse-checkout: |
            /plugins/woocommerce/woocommerce.php
            /plugins/woocommerce/readme.txt
          sparse-checkout-cone-mode: false
        if: ${{ inputs.create_github_release && ! inputs.skip_verify }}

      - name: 'Pre-build verification'
        if: ${{ inputs.create_github_release && ! inputs.skip_verify }}
        env:
          BRANCH: ${{ inputs.branch || github.ref }}
        run: |
            # Branch name must be 'release/*'.
            branch_name="${BRANCH#refs/heads/}"
            if  [[ $branch_name != release/* ]] ; then
                echo "::error::Pre-build verification: branch name '$branch_name' is not matching 'release/*' pattern."
                exit 1
            fi

            # Version number in branch name and plugin main version must match.
            branch_plugin_version=$( cat checkout-branch/plugins/woocommerce/woocommerce.php | grep -oP '(?<=Version: )(.+)' | head -n1 )
            version_prefix=${branch_name/"release/"/""}
            if [[ $branch_plugin_version != "$version_prefix."* ]] ; then
                echo "::error::Pre-build verification: release version in branch ($branch_plugin_version) is not matching '$version_prefix.*' pattern."
                exit 1
            fi

            # Release should not already exist on wporg.
            tag_exists=$(curl -s 'https://api.wordpress.org/plugins/info/1.2/?action=plugin_information&request\[slug\]=woocommerce' | jq "(.versions | has(\"$branch_plugin_version\"))")
            if [ "$tag_exists" == "true" ]; then
              echo "::error::Tag '$branch_plugin_version' already exists on WordPress.org."
              exit 1
            fi

            # Stable version in release branch should match wporg.
            svn_stable_version=$( wget --quiet https://plugins.svn.wordpress.org/woocommerce/trunk/readme.txt -O /dev/stdout |  grep -oP '(?<=Stable tag: )(.+)' | head -n1 )
            branch_stable_version=$( cat checkout-branch/plugins/woocommerce/readme.txt | grep -oP '(?<=Stable tag: )(.+)' | head -n1 )
            if [[ $branch_stable_version != $svn_stable_version ]] ; then
                echo "::error::Pre-build verification: stable version in release branch ($branch_stable_version) is not matching the one in SVN trunk ($svn_stable_version)."
                exit 1
            fi

  build:
    name: Build release zip file
    runs-on: ubuntu-latest
    needs: [ verify-prs, verify-release-versions ]
    permissions:
      contents: read
    steps:
      - name: Verify release branch.
        env:
          BRANCH: ${{ inputs.branch || github.ref }}
        run: |
          if ! git ls-remote --exit-code --heads  https://github.com/${GITHUB_REPOSITORY} ${BRANCH} > /dev/null; then
            echo "::error::Source branch '$BRANCH' does not exist."
            exit 1
          fi

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || github.ref }}

      - name: Setup WooCommerce Monorepo
        uses: ./.github/actions/setup-woocommerce-monorepo
        with:
          pull-package-deps: '@woocommerce/plugin-woocommerce'

      - name: Build zip
        working-directory: plugins/woocommerce
        run: bash bin/build-zip.sh

      - name: Unzip the file (prevents double zip problem)
        run: unzip plugins/woocommerce/woocommerce.zip -d zipfile

      - name: Upload the zip file as an artifact
        uses: actions/upload-artifact@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: woocommerce
          path: zipfile
          retention-days: 1

  create-release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: build
    if: ${{ inputs.create_github_release }}
    permissions:
      contents: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: woocommerce

      - name: Get version from plugin file
        id: get_version
        run: |
          version=$(cat ./woocommerce/woocommerce.php | grep -oP '(?<=Version: )(.+)' | head -n1)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Generate release ZIP file
        run: |
          zip -q -9 -r ./woocommerce.zip ./woocommerce/

      - name: Create draft release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
          IS_PRERELEASE: ${{ contains(steps.get_version.outputs.version, '-rc') }}
        run: |
          FLAGS=""
          if [ "$IS_PRERELEASE" = "true" ]; then
            FLAGS="--prerelease=true"
          fi

          gh release create ${{ steps.get_version.outputs.version }} \
            './woocommerce.zip' \
            --title '${{ steps.get_version.outputs.version }}' \
            --notes '' \
            --target '${{ inputs.branch || github.ref }}' \
            --latest=false \
            --draft \
            $FLAGS
