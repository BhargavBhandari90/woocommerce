name: 'Release: Compile changelog'
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version Override (X.Y.Z format). If not provided, it is extracted from the release branch. Ensure branch "release/{version}" exists on remote.'
        required: false
        default: ''
      append_changelog:
        description: 'Append changelog entries to the existing changelog file instead of replacing it.'
        type: boolean
        required: false
        default: false
      release_date:
        description: 'Release date in YYYY-MM-DD format. If not provided, the current date will be used.'
        required: false
        default: ''

env:
    GIT_COMMITTER_NAME: 'WooCommerce Bot'
    GIT_COMMITTER_EMAIL: 'no-reply@woocommerce.com'
    GIT_AUTHOR_NAME: 'WooCommerce Bot'
    GIT_AUTHOR_EMAIL: 'no-reply@woocommerce.com'

jobs:
  build-prep:
    name: Create changelog PR
    runs-on: ${{ ( github.repository == 'woocommerce/woocommerce' && 'blacksmith-2vcpu-ubuntu-2404' ) || 'ubuntu-latest' }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Get version from the branch name workflow is running on
        if: ${{ github.event.inputs.version == '' }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        id: extract-version
        with:
          script: |
            const refName = process.env.GITHUB_REF_NAME;
            const versionMatch = refName.match(/^release\/(\d+\.\d+(?:\.\d+)?)$/); // Match either X.Y or X.Y.Z formats
            if (versionMatch) {
              const version = versionMatch[1];
              console.log(`Extracted version: ${version}`);
              core.setOutput('version', version);
            } else {
              core.setFailed(`Branch name ${refName} does not match the expected pattern 'release/x.y' or 'release/x.y.z'`);
              process.exit(1);
            }

      - name: Validate version input override
        if: ${{ github.event.inputs.version != '' }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        env:
          VERSION: ${{ github.event.inputs.version }}
        with:
          script: |
            const version = process.env.VERSION;
            if (!/^\d+\.\d+(?:\.\d+)?$/.test(version)) {
              core.setFailed('Invalid version format. The version must be in the format X.Y or X.Y.Z');
              process.exit(1);
            }

            console.log(`Version: ${version}`);

      - name: Checkout code
        uses: actions/checkout@v3
        with:
            fetch-depth: 0

      - name: Setup PNPM
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
            node-version-file: .nvmrc
            cache: pnpm

      - name: Install prerequisites
        run: |
            pnpm install --filter monorepo-utils --ignore-scripts
            # ignore scripts speeds up setup significantly, but we still need to build monorepo utils
            pnpm build
        working-directory: tools/monorepo-utils

      - name: Generate changelog changes and create PR
        id: changelog
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ -z "${{ github.event.inputs.version }}" ]]; then
            # The version is empty, so we need to extract it from the provided branch name
            BRANCH_ARG="-b ${{ github.ref_name }}"
            VERSION="${{ steps.extract-version.outputs.version }}"
          else
            # The version is provided, so we use it directly
            BRANCH_ARG=""
            VERSION="${{ github.event.inputs.version }}"
          fi

          APPEND_CHANGELOG=""
          if [[ "${{ github.event.inputs.append_changelog }}" == "true" ]]; then
            APPEND_CHANGELOG="--append-changelog"
          fi

          OVERRIDE_DATE=""
          if [[ -n "${{ github.event.inputs.release_date }}" ]]; then
            OVERRIDE_DATE="--override ${{ github.event.inputs.release_date }}"
          fi

          # Normalize the version by removing .0 patch if present, as the changelog command does not support it
          VERSION=${VERSION%.0}

          pnpm utils code-freeze changelog -o ${{ github.repository_owner }} -v $VERSION $BRANCH_ARG $APPEND_CHANGELOG $OVERRIDE_DATE
